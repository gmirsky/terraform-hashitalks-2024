name: k8s-Plan

on:
  workflow_dispatch:
    inputs:
      environment:
        description: 'Environment to run tests against'
        type: environment
        required: true

env:
  TERRAFORM_VERSION: '1.5.7'

jobs:

  infra:
    runs-on: self-hosted

    outputs:
      resource_group_name: ${{ steps.apply.outputs.resource_group_name }}
      kubernetes_cluster_name: ${{ steps.apply.outputs.kubernetes_cluster_name }}
      workload_managed_identity_id: ${{ steps.apply.outputs.workload_managed_identity_id }}
      keyvault_name: ${{ steps.apply.outputs.keyvault_name }}
      cosmos_endpoint: ${{ steps.apply.outputs.cosmos_endpoint }}
      user_svc_database: ${{ steps.apply.outputs.user_svc_database }}
      container_registry: ${{ steps.apply.outputs.container_registry }}
      backend_ip_address: ${{ steps.apply.outputs.backend_ip_address }}
      backend_nodepool: ${{ steps.apply.outputs.backend_nodepool }}

    environment:
      name: ${{ inputs.environment }}

    steps:
    - uses: actions/checkout@v3

    - id: setup
      name: Setup `terraform`
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - id: apply
      name: Terraform Apply
      env:
        ARM_SUBSCRIPTION_ID: ${{ vars.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ vars.ARM_TENANT_ID }}
        ARM_CLIENT_ID: ${{ vars.TERRAFORM_ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.TERRAFORM_ARM_CLIENT_SECRET }}
        TF_VAR_application_name: ${{ vars.APPLICATION_NAME }}
        TF_VAR_environment_name: ${{ vars.ENVIRONMENT_NAME }}
      working-directory: ./src/terraform/infra
      run: |
        terraform init \
          -backend-config="resource_group_name=${{ vars.BACKEND_RESOURCE_GROUP_NAME }}" \
          -backend-config="storage_account_name=${{ vars.BACKEND_STORAGE_ACCOUNT_NAME }}" \
          -backend-config="container_name=${{ vars.BACKEND_STORAGE_CONTAINER_NAME }}" \
          -backend-config="key=${{ vars.APPLICATION_NAME }}-${{ vars.ENVIRONMENT_NAME }}"
          
        terraform apply -refresh-only -auto-approve

        resource_group_name=$(terraform output -raw resource_group_name)
        echo "resource_group_name=$resource_group_name" >> "$GITHUB_OUTPUT"

        kubernetes_cluster_name=$(terraform output -raw kubernetes_cluster_name)
        echo "kubernetes_cluster_name=$kubernetes_cluster_name" >> "$GITHUB_OUTPUT"

        container_registry=$(terraform output -raw container_registry)
        echo "container_registry=$container_registry" >> "$GITHUB_OUTPUT"

        workload_managed_identity_id=$(terraform output -raw workload_managed_identity_id)
        echo "workload_managed_identity_id=$workload_managed_identity_id" >> "$GITHUB_OUTPUT"

        keyvault_name=$(terraform output -raw keyvault_name)
        echo "keyvault_name=$keyvault_name" >> "$GITHUB_OUTPUT"

        cosmos_endpoint=$(terraform output -raw cosmos_endpoint)
        echo "cosmos_endpoint=$cosmos_endpoint" >> "$GITHUB_OUTPUT"

        user_svc_database=$(terraform output -raw user_svc_database)
        echo "user_svc_database=$user_svc_database" >> "$GITHUB_OUTPUT"

        backend_ip_address=$(terraform output -raw backend_ip_address)
        echo "backend_ip_address=$backend_ip_address" >> "$GITHUB_OUTPUT"

        backend_nodepool=$(terraform output -raw backend_nodepool)
        echo "backend_nodepool=$backend_nodepool" >> "$GITHUB_OUTPUT"
        
  k8s:
    runs-on: self-hosted
    needs: infra

    environment:
      name: ${{ inputs.environment }}

    steps:
    - uses: actions/checkout@v3

    - id: setup
      name: Setup `terraform`
      uses: hashicorp/setup-terraform@v3
      with:
        terraform_version: ${{ env.TERRAFORM_VERSION }}

    - id: plan
      name: Terraform Plan
      env:
        ARM_SUBSCRIPTION_ID: ${{ vars.ARM_SUBSCRIPTION_ID }}
        ARM_TENANT_ID: ${{ vars.ARM_TENANT_ID }}
        ARM_CLIENT_ID: ${{ vars.TERRAFORM_ARM_CLIENT_ID }}
        ARM_CLIENT_SECRET: ${{ secrets.TERRAFORM_ARM_CLIENT_SECRET }}
        TF_VAR_application_name: ${{ vars.APPLICATION_NAME }}
        TF_VAR_environment_name: ${{ vars.ENVIRONMENT_NAME }}
        TF_VAR_resource_group_name: ${{ needs.infra.outputs.resource_group_name }}
        TF_VAR_kubernetes_cluster_name: ${{ needs.infra.outputs.kubernetes_cluster_name }}
        TF_VAR_container_registry: ${{ needs.infra.outputs.container_registry }}
        TF_VAR_workload_managed_identity_id: ${{ needs.infra.outputs.workload_managed_identity_id }}
        TF_VAR_keyvault_name: ${{ needs.infra.outputs.keyvault_name }}
        TF_VAR_cosmos_endpoint: ${{ needs.infra.outputs.cosmos_endpoint }}
        TF_VAR_user_svc_database: ${{ needs.infra.outputs.user_svc_database }}
        TF_VAR_backend_ip_address: ${{ needs.infra.outputs.backend_ip_address }}
        TF_VAR_backend_nodepool: ${{ needs.infra.outputs.backend_nodepool }}
      working-directory: ./src/terraform/k8s
      run: |
        terraform init \
          -backend-config="resource_group_name=${{ vars.BACKEND_RESOURCE_GROUP_NAME }}" \
          -backend-config="storage_account_name=${{ vars.BACKEND_STORAGE_ACCOUNT_NAME }}" \
          -backend-config="container_name=${{ vars.BACKEND_STORAGE_CONTAINER_NAME }}" \
          -backend-config="key=${{ vars.APPLICATION_NAME }}-${{ vars.ENVIRONMENT_NAME }}-k8s"
          
        terraform plan